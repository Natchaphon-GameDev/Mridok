//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Pruek's Scripts/Pruek/Controller/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""PlayerA"",
            ""id"": ""a17120e6-9dee-4e31-a207-36a0e57a3f07"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""4f982a0c-a512-479d-ad71-02052f058a0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""89bcf327-6dc2-4b20-815b-3eeacf273ab1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""2ebef15f-4c9a-42e5-9af5-a4ed5bd0f932"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81e0b75a-b6b7-4f38-bb07-aebf52ae4ced"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""MoveLR"",
                    ""id"": ""a993536c-8495-4e75-8ccf-a1ba936c14ff"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2d3d9028-52a4-4ce6-a7d1-d8dffa33c804"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=1)"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fdb2cd62-392d-47dc-91c2-04b31442afbe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=1)"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""27cf995d-71ef-40c4-93b6-c3969e04a963"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerB"",
            ""id"": ""4bbb011e-6ff4-440b-b108-ec48e62749e6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""051b3d0d-0e24-4c74-b095-399cbe462a65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a07139b6-4de0-44f8-a851-d7df3694f98a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""0f0688e3-008b-495f-badc-39d75550c993"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""339be7eb-0dda-4e77-9d67-0cb7fb040e53"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""MoveLR"",
                    ""id"": ""f96bcf69-43d7-4862-9733-2c4641a46a64"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8472f506-c431-4b58-a1f5-b79b895eff0b"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=1)"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""61d887e0-49fb-451b-bfee-d067c91cce3a"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=1)"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""29d86fb9-2009-455c-8e3c-eec73ca71c20"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerA
        m_PlayerA = asset.FindActionMap("PlayerA", throwIfNotFound: true);
        m_PlayerA_Move = m_PlayerA.FindAction("Move", throwIfNotFound: true);
        m_PlayerA_Jump = m_PlayerA.FindAction("Jump", throwIfNotFound: true);
        m_PlayerA_Interaction = m_PlayerA.FindAction("Interaction", throwIfNotFound: true);
        // PlayerB
        m_PlayerB = asset.FindActionMap("PlayerB", throwIfNotFound: true);
        m_PlayerB_Move = m_PlayerB.FindAction("Move", throwIfNotFound: true);
        m_PlayerB_Jump = m_PlayerB.FindAction("Jump", throwIfNotFound: true);
        m_PlayerB_Interaction = m_PlayerB.FindAction("Interaction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerA
    private readonly InputActionMap m_PlayerA;
    private IPlayerAActions m_PlayerAActionsCallbackInterface;
    private readonly InputAction m_PlayerA_Move;
    private readonly InputAction m_PlayerA_Jump;
    private readonly InputAction m_PlayerA_Interaction;
    public struct PlayerAActions
    {
        private @Controller m_Wrapper;
        public PlayerAActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerA_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerA_Jump;
        public InputAction @Interaction => m_Wrapper.m_PlayerA_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerA; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerAActions instance)
        {
            if (m_Wrapper.m_PlayerAActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnJump;
                @Interaction.started -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnInteraction;
                @Interaction.performed -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnInteraction;
                @Interaction.canceled -= m_Wrapper.m_PlayerAActionsCallbackInterface.OnInteraction;
            }
            m_Wrapper.m_PlayerAActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
            }
        }
    }
    public PlayerAActions @PlayerA => new PlayerAActions(this);

    // PlayerB
    private readonly InputActionMap m_PlayerB;
    private IPlayerBActions m_PlayerBActionsCallbackInterface;
    private readonly InputAction m_PlayerB_Move;
    private readonly InputAction m_PlayerB_Jump;
    private readonly InputAction m_PlayerB_Interaction;
    public struct PlayerBActions
    {
        private @Controller m_Wrapper;
        public PlayerBActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerB_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerB_Jump;
        public InputAction @Interaction => m_Wrapper.m_PlayerB_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerB; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerBActions instance)
        {
            if (m_Wrapper.m_PlayerBActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnJump;
                @Interaction.started -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnInteraction;
                @Interaction.performed -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnInteraction;
                @Interaction.canceled -= m_Wrapper.m_PlayerBActionsCallbackInterface.OnInteraction;
            }
            m_Wrapper.m_PlayerBActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
            }
        }
    }
    public PlayerBActions @PlayerB => new PlayerBActions(this);
    public interface IPlayerAActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
    }
    public interface IPlayerBActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
    }
}
